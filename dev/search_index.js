var documenterSearchIndex = {"docs":
[{"location":"envs/envs/#Envs","page":"Env","title":"Envs","text":"","category":"section"},{"location":"envs/envs/","page":"Env","title":"Env","text":"Modules = [PathPlanning.Envs]\nOrder   = [:function, :type]","category":"page"},{"location":"envs/envs/#PathPlanning.Envs.add_obstacle!-Tuple{PathPlanning.Envs.Env, PathPlanning.Envs.AbstractObstacle}","page":"Env","title":"PathPlanning.Envs.add_obstacle!","text":"add_obstacle!(env::Env, obstacle::AbstractObstacle)\n\nAdd a obstacle to Env object.\n\n\n\n\n\n","category":"method"},{"location":"envs/envs/#PathPlanning.Envs.create_example_2D_env-Tuple{}","page":"Env","title":"PathPlanning.Envs.create_example_2D_env","text":"create_example_2D_env()::Env\n\nReturn an example Env object that includes 4 RectObstacles and 5 CircleObstacles.\n\n\n\n\n\n","category":"method"},{"location":"envs/envs/#PathPlanning.Envs.is_inside-Union{Tuple{N}, Tuple{PathPlanning.Envs.CircleObstacle{N}, StaticArraysCore.SVector{N, Float64}}} where N","page":"Env","title":"PathPlanning.Envs.is_inside","text":"is_inside(obs::CircleObstacle{N},, position::SVector{N,Float64})::Bool where {N}\n\nReturn if the position is inside the CircleObstacle.\n\n\n\n\n\n","category":"method"},{"location":"envs/envs/#PathPlanning.Envs.is_inside-Union{Tuple{N}, Tuple{PathPlanning.Envs.RectObstacle{N}, StaticArraysCore.SVector{N, Float64}}} where N","page":"Env","title":"PathPlanning.Envs.is_inside","text":"is_inside(obs::RectObstacle{N}, position::SVector{N,Float64})::Bool where {N}\n\nReturn if the position is inside the RectObstacle.\n\n\n\n\n\n","category":"method"},{"location":"envs/envs/#PathPlanning.Envs.is_inside_any_obstacle-Union{Tuple{N}, Tuple{PathPlanning.Envs.Env, StaticArraysCore.SVector{N, Float64}}} where N","page":"Env","title":"PathPlanning.Envs.is_inside_any_obstacle","text":"is_inside_any_obstacle(env::Env, position::SVector{N,Float64})::Bool where {N}\n\nReturn if the position is inside any obstacle in the Env.\n\n\n\n\n\n","category":"method"},{"location":"envs/envs/#PathPlanning.Envs.CircleObstacle","page":"Env","title":"PathPlanning.Envs.CircleObstacle","text":"CircleObstacle{N}\n\nA Circle-type Obstacle.\n\nFields\n\ncenter::SVector{N,Float64}: center position of the circle-type obstacle.\nradius::Float64: radius of the circle-type obstacle.\n\n\n\n\n\n","category":"type"},{"location":"envs/envs/#PathPlanning.Envs.Env","page":"Env","title":"PathPlanning.Envs.Env","text":"Env\n\nA Env object has all obstacles that are in the environment.\n\nFields\n\nnum_obstacles::Int64: the number of the obstacles\nobstacles::Vector{AbstractObstacle}: obstacles that have a position and a size\n\n\n\n\n\n","category":"type"},{"location":"envs/envs/#PathPlanning.Envs.Env-Tuple{Vector{PathPlanning.Envs.AbstractObstacle}}","page":"Env","title":"PathPlanning.Envs.Env","text":"Env(obstacles::Vector{AbstractObstacle})\n\nConstructor for Env with obstacles.\n\n\n\n\n\n","category":"method"},{"location":"envs/envs/#PathPlanning.Envs.Env-Tuple{}","page":"Env","title":"PathPlanning.Envs.Env","text":"Env()\n\nConstructor for Env with no obstacles.\n\n\n\n\n\n","category":"method"},{"location":"envs/envs/#PathPlanning.Envs.RectObstacle","page":"Env","title":"PathPlanning.Envs.RectObstacle","text":"RectObstacle{N}\n\nA Rectangle-type Obstacle.\n\nFields\n\ncenter::SVector{N,Float64}: center position of the rectangle-type obstacle.\nsize::SVector{N,Float64}: width of each side of the rectangle-type obstacle.\n\n\n\n\n\n","category":"type"},{"location":"planners/planners/#Planners","page":"Planners","title":"Planners","text":"","category":"section"},{"location":"planners/planners/","page":"Planners","title":"Planners","text":"Modules = [PathPlanning.Planners]\nOrder   = [:function, :type]","category":"page"},{"location":"planners/planners/#PathPlanning.Planners.calc_distance-Union{Tuple{N}, Tuple{PathPlanning.Planners.Node{N}, PathPlanning.Planners.Node{N}}} where N","page":"Planners","title":"PathPlanning.Planners.calc_distance","text":"calc_distance(node1::Node{N}, node2::Node{N})::Float64 where {N}\n\nCalculate the Euclidean distance between the two nodes in the N-dimensional space.\n\n\n\n\n\n","category":"method"},{"location":"planners/planners/#PathPlanning.Planners.extract_path-Union{Tuple{PathPlanning.Planners.RRT{N}}, Tuple{N}} where N","page":"Planners","title":"PathPlanning.Planners.extract_path","text":"extract_path(rrt::RRT{N}) where N\n\nReturn a path from start node to goal node by extracting nodes.\n\nArguments\n\nrrt::RRT{N}: a planner using RRT\n\n\n\n\n\n","category":"method"},{"location":"planners/planners/#PathPlanning.Planners.get_extended_node-Union{Tuple{N}, Tuple{PathPlanning.Planners.RRT{N}, PathPlanning.Planners.Node{N}, PathPlanning.Planners.Node{N}}} where N","page":"Planners","title":"PathPlanning.Planners.get_extended_node","text":"get_extended_node(rrt::RRT{N}, nearest_node::Node{N}, new_node::Node{N})::Node{N} where {N}\n\nCreate and return a node at the position from the nearest node to the new node as close as by the step size.\n\nArguments\n\nrrt::RRT{N}: a planner using RRT\nnearest_node::Node{N}: the node nearest to the new node in the graph\nnew_node::Node{N}: the node newly sampled\n\n\n\n\n\n","category":"method"},{"location":"planners/planners/#PathPlanning.Planners.get_nearest_node_index-Union{Tuple{N}, Tuple{PathPlanning.Planners.RRT{N}, PathPlanning.Planners.Node{N}}} where N","page":"Planners","title":"PathPlanning.Planners.get_nearest_node_index","text":"get_nearest_node_index(rrt::RRT{N}, new_node::Node{N})::Int64 where {N}\n\nReturn the index of the node nearest to the given node in the graph.\n\n\n\n\n\n","category":"method"},{"location":"planners/planners/#PathPlanning.Planners.is_near_the_goal-Union{Tuple{N}, Tuple{PathPlanning.Planners.RRT{N}, PathPlanning.Planners.Node{N}}} where N","page":"Planners","title":"PathPlanning.Planners.is_near_the_goal","text":"is_near_the_goal(rrt::RRT{N}, node::Node{N}) where {N}\n\nReturn if given node is near the goal (distance from goal is smaller than the rrt.step_size.)\n\nArguments\n\nrrt::RRT{N}: a planner using RRT\nnode::Node{N}: a node in the search space\n\n\n\n\n\n","category":"method"},{"location":"planners/planners/#PathPlanning.Planners.plan-Union{Tuple{PathPlanning.Planners.RRT{N}}, Tuple{N}} where N","page":"Planners","title":"PathPlanning.Planners.plan","text":"plan(rrt::RRT{N})::Vector{Node{N}} where {N}\n\nFind and return a path from the start node rrt.start to the goal node rrt.goal with RRT algorithm.\n\nArguments\n\nrrt::RRT{N}: a planner using RRT\n\nReturns\n\npath::Vector{Node{N}}: path (sequence of nodes) from the start node rrt.start to the goal node rrt.goal\n\n\n\n\n\n","category":"method"},{"location":"planners/planners/#PathPlanning.Planners.sample-Union{Tuple{PathPlanning.Planners.RRT{N}}, Tuple{N}} where N","page":"Planners","title":"PathPlanning.Planners.sample","text":"sample(rrt::RRT{N})::Node{N} where {N}\n\nSample a node from the search space.\n\n\n\n\n\n","category":"method"},{"location":"planners/planners/#PathPlanning.Planners.Node","page":"Planners","title":"PathPlanning.Planners.Node","text":"Node{N}\n\nNode configures a graph.\n\nFields\n\nposition::SVector{N, Float64}: position of the node in the search space\nparent::Union{Int64, Nothing}: index of the parent node\n\n\n\n\n\n","category":"type"},{"location":"planners/planners/#PathPlanning.Planners.Node-Union{Tuple{StaticArraysCore.SVector{N, Float64}}, Tuple{N}} where N","page":"Planners","title":"PathPlanning.Planners.Node","text":"Node(position::SVector{N, Float64}) where {N}\n\nConstructor of the Node struct. The index of the parent node is initiated as nothing.\n\nArguments\n\nposition::SVector{N, Float64}: position of the node in the search space\n\n\n\n\n\n","category":"method"},{"location":"planners/planners/#PathPlanning.Planners.RRT","page":"Planners","title":"PathPlanning.Planners.RRT","text":"RRT{N}\n\nA planner using RRT.\n\nFields\n\nstart::Node{N}: start position in the search space\ngoal::Node{N}: goal position in the search space\nlow::SVector{N,Float64}: lower bounds of the search space\nhigh::SVector{N,Float64}: upper bounds of the search space\nnodes::Vector{Node{N}}: nodes configure tje graph\ngoal_sample_rate::Float64: rate of sampling the goal node\nstep_size::Float64: maximum distance between each node\nmax_iter::Int64: maximum the number of the iterations\nis_approved::Union{Function, Nothing}: a function that returns if the node can be added the graph\n\n\n\n\n\n","category":"type"},{"location":"planners/planners/#PathPlanning.Planners.RRT-Union{Tuple{N}, NTuple{4, StaticArraysCore.SVector{N, Float64}}} where N","page":"Planners","title":"PathPlanning.Planners.RRT","text":"RRT(\n    start::SVector{N,Float64},\n    goal::SVector{N,Float64},\n    low::SVector{N,Float64},\n    high::SVector{N,Float64};\n    goal_sample_rate::Float64 = 0.2,\n    step_size::Union{Float64,Nothing} = nothing,\n    max_iter::Int64 = 500,\n    is_approved::Union{Function, Nothing} = nothing,\n) where {N}\n\nConstructor of RRT struct. The step_size is initiated as 1/20th of the distance between the start node and the start node by default.\n\nArguments\n\nstart::Node{N}: start position in the search space\ngoal::Node{N}: goal position in the search space\nlow::SVector{N,Float64}: lower bounds of the search space\nhigh::SVector{N,Float64}: upper bounds of the search space\ngoal_sample_rate::Float64: rate of sampling the goal node\nstep_size::Float64: maximum distance between each node\nmax_iter::Int64: maximum the number of the iterations\nis_approved::Union{Function, Nothing}: a function that returns if the node can be added the graph\n\n\n\n\n\n","category":"method"},{"location":"plot/plot/#Plot","page":"Env","title":"Plot","text":"","category":"section"},{"location":"plot/plot/","page":"Env","title":"Env","text":"Modules = [PathPlanning.Plot]\nOrder   = [:function, :type]","category":"page"},{"location":"plot/plot/#PathPlanning.Plot.animate-Tuple{PathPlanning.Envs.Env, PathPlanning.Planners.AbstractPlanner{2}}","page":"Env","title":"PathPlanning.Plot.animate","text":"animate(\n    env::Env,\n    planner::AbstractPlanner{2};\n    resolution::Tuple{Int64,Int64}=(1000,600),\n    framerate::Int64=30,\n    file_name::String=\"path.mp4\"\n)::Nothing\n\nCreate a movie that shows the planning process.\n\n\n\n\n\n","category":"method"},{"location":"plot/plot/#PathPlanning.Plot.plot-Tuple{PathPlanning.Envs.Env, PathPlanning.Planners.AbstractPlanner{2}}","page":"Env","title":"PathPlanning.Plot.plot","text":"plot(\n    env::Env,\n    planner::AbstractPlanner{2};\n    resolution::Tuple{Int64,Int64}=(1000,600),\n)::Tuple{Figure, Axis}\n\nPlot nodes, paths, and obstacles that are in the env or the planner.\n\n\n\n\n\n","category":"method"},{"location":"plot/plot/#PathPlanning.Plot.plot_nodes!-Tuple{Makie.Axis, Vector{PathPlanning.Planners.Node{2}}}","page":"Env","title":"PathPlanning.Plot.plot_nodes!","text":"plot_nodes!(axis::Axis, nodes::Vector{Node{2}})::Nothing\n\nPlot each nodes as small circles.\n\n\n\n\n\n","category":"method"},{"location":"plot/plot/#PathPlanning.Plot.plot_obstacle!-Tuple{Makie.Axis, PathPlanning.Envs.CircleObstacle{2}}","page":"Env","title":"PathPlanning.Plot.plot_obstacle!","text":"plot_obstacle!(axis::Axis, obstacle::CircleObstacle{2})::Nothing\n\nPlot a CircleObstacle.\n\n\n\n\n\n","category":"method"},{"location":"plot/plot/#PathPlanning.Plot.plot_obstacle!-Tuple{Makie.Axis, PathPlanning.Envs.RectObstacle{2}}","page":"Env","title":"PathPlanning.Plot.plot_obstacle!","text":"plot_obstacle!(axis::Axis, obstacle::RectObstacle{2})::Nothing\n\nPlot a RectObstacle.\n\n\n\n\n\n","category":"method"},{"location":"plot/plot/#PathPlanning.Plot.plot_obstacles!-Tuple{Makie.Axis, Vector{PathPlanning.Envs.AbstractObstacle}}","page":"Env","title":"PathPlanning.Plot.plot_obstacles!","text":"plot_obstacles!(axis::Axis, obstacles::Vector{AbstractObstacle})::Nothing\n\nPlot obstacles that can include RectObstacles, CircleObstacles, or both.\n\n\n\n\n\n","category":"method"},{"location":"plot/plot/#PathPlanning.Plot.plot_paths!-Tuple{Makie.Axis, Vector{PathPlanning.Planners.Node{2}}}","page":"Env","title":"PathPlanning.Plot.plot_paths!","text":"plot_paths!(axis::Axis, nodes::Vector{Node{2}})::Nothing\n\nPlot all paths as line segments. If you input all nodes that the planner has, you can plot all paths that the planner explorated, If you input nodes in a path that the planner found, you can plot a path that the planner found.\n\n\n\n\n\n","category":"method"},{"location":"#PathPlanning.jl-Documentation","page":"Index","title":"PathPlanning.jl Documentation","text":"","category":"section"},{"location":"","page":"Index","title":"Index","text":"Pages = [\n        \"planners/planners.md\",\n        \"envs/envs.md\",\n        \"plot/plot.md\",\n]\nDepth = 3","category":"page"}]
}
