var documenterSearchIndex = {"docs":
[{"location":"envs/env/#Envs","page":"Env","title":"Envs","text":"","category":"section"},{"location":"envs/env/","page":"Env","title":"Env","text":"Modules = [PathPlanning.Envs]\nOrder   = [:function, :type]","category":"page"},{"location":"#PathPlanning.jl-Documentation","page":"Index","title":"PathPlanning.jl Documentation","text":"","category":"section"},{"location":"","page":"Index","title":"Index","text":"Pages = [\n        \"planners/rrt.md\",\n        \"envs/env.md\",\n]\nDepth = 3","category":"page"},{"location":"planners/rrt/#Planners","page":"RRT","title":"Planners","text":"","category":"section"},{"location":"planners/rrt/","page":"RRT","title":"RRT","text":"Modules = [PathPlanning.Planners]\nOrder   = [:function, :type]","category":"page"},{"location":"planners/rrt/#PathPlanning.Planners.calc_distance-Union{Tuple{N}, Tuple{PathPlanning.Planners.Node{N}, PathPlanning.Planners.Node{N}}} where N","page":"RRT","title":"PathPlanning.Planners.calc_distance","text":"calc_distance(node1::Node{N}, node2::Node{N})::Float64 where {N}\n\nCalculate the Euclidean distance between the two nodes in the N-dimensional space.\n\n\n\n\n\n","category":"method"},{"location":"planners/rrt/#PathPlanning.Planners.extract_path-Union{Tuple{PathPlanning.Planners.RRT{N}}, Tuple{N}} where N","page":"RRT","title":"PathPlanning.Planners.extract_path","text":"extract_path(rrt::RRT{N}) where N\n\nReturn a path from start node to goal node by extracting nodes.\n\nArguments\n\nrrt::RRT{N}: a planner using RRT\n\n\n\n\n\n","category":"method"},{"location":"planners/rrt/#PathPlanning.Planners.get_extended_node-Union{Tuple{N}, Tuple{PathPlanning.Planners.RRT{N}, PathPlanning.Planners.Node{N}, PathPlanning.Planners.Node{N}}} where N","page":"RRT","title":"PathPlanning.Planners.get_extended_node","text":"get_extended_node(rrt::RRT{N}, nearest_node::Node{N}, new_node::Node{N})::Node{N} where {N}\n\nCreate and return a node at the position from the nearest node to the new node as close as by the step size.\n\nArguments\n\nrrt::RRT{N}: a planner using RRT\nnearest_node::Node{N}: the node nearest to the new node in the graph\nnew_node::Node{N}: the node newly sampled\n\n\n\n\n\n","category":"method"},{"location":"planners/rrt/#PathPlanning.Planners.get_nearest_node_index-Union{Tuple{N}, Tuple{PathPlanning.Planners.RRT{N}, PathPlanning.Planners.Node{N}}} where N","page":"RRT","title":"PathPlanning.Planners.get_nearest_node_index","text":"get_nearest_node_index(rrt::RRT{N}, new_node::Node{N})::Int64 where {N}\n\nReturn the index of the node nearest to the given node in the graph.\n\n\n\n\n\n","category":"method"},{"location":"planners/rrt/#PathPlanning.Planners.is_near_the_goal-Union{Tuple{N}, Tuple{PathPlanning.Planners.RRT{N}, PathPlanning.Planners.Node{N}}} where N","page":"RRT","title":"PathPlanning.Planners.is_near_the_goal","text":"is_near_the_goal(rrt::RRT{N}, node::Node{N}) where {N}\n\nReturn if given node is near the goal (distance from goal is smaller than the rrt.step_size.)\n\nArguments\n\nrrt::RRT{N}: a planner using RRT\nnode::Node{N}: a node in the search space\n\n\n\n\n\n","category":"method"},{"location":"planners/rrt/#PathPlanning.Planners.plan-Union{Tuple{PathPlanning.Planners.RRT{N}}, Tuple{N}} where N","page":"RRT","title":"PathPlanning.Planners.plan","text":"plan(rrt::RRT{N})::Vector{Node{N}} where {N}\n\nFind and return a path from the start node rrt.start to the goal node rrt.goal with RRT algorithm.\n\nArguments\n\nrrt::RRT{N}: a planner using RRT\n\nReturns\n\npath::Vector{Node{N}}: path (sequence of nodes) from the start node rrt.start to the goal node rrt.goal\n\n\n\n\n\n","category":"method"},{"location":"planners/rrt/#PathPlanning.Planners.sample-Union{Tuple{PathPlanning.Planners.RRT{N}}, Tuple{N}} where N","page":"RRT","title":"PathPlanning.Planners.sample","text":"sample(rrt::RRT{N})::Node{N} where {N}\n\nSample a node from the search space.\n\n\n\n\n\n","category":"method"},{"location":"planners/rrt/#PathPlanning.Planners.Node","page":"RRT","title":"PathPlanning.Planners.Node","text":"Node{N}\n\nNode configures a graph.\n\nFields\n\nposition::SVector{N, Float64}: position of the node in the search space\nparent::Union{Int64, Nothing}: index of the parent node\n\n\n\n\n\n","category":"type"},{"location":"planners/rrt/#PathPlanning.Planners.Node-Union{Tuple{StaticArraysCore.SVector{N, Float64}}, Tuple{N}} where N","page":"RRT","title":"PathPlanning.Planners.Node","text":"Node(position::SVector{N, Float64}) where {N}\n\nConstructor of the Node struct. The index of the parent node is initiated as nothing.\n\nArguments\n\nposition::SVector{N, Float64}: position of the node in the search space\n\n\n\n\n\n","category":"method"},{"location":"planners/rrt/#PathPlanning.Planners.RRT","page":"RRT","title":"PathPlanning.Planners.RRT","text":"RRT{N}\n\nA planner using RRT.\n\nFields\n\nstart::Node{N}: start position in the search space\ngoal::Node{N}: goal position in the search space\nlow::SVector{N,Float64}: lower bounds of the search space\nhigh::SVector{N,Float64}: upper bounds of the search space\nnodes::Vector{Node{N}}: nodes configure tje graph\ngoal_sample_rate::Float64: rate of sampling the goal node\nstep_size::Float64: maximum distance between each node\nmax_iter::Int64: maximum the number of the iterations\nis_approved::Union{Function, Nothing}: a function that returns if the node can be added the graph\n\n\n\n\n\n","category":"type"},{"location":"planners/rrt/#PathPlanning.Planners.RRT-Union{Tuple{N}, NTuple{4, StaticArraysCore.SVector{N, Float64}}} where N","page":"RRT","title":"PathPlanning.Planners.RRT","text":"RRT(\n    start::SVector{N,Float64},\n    goal::SVector{N,Float64},\n    low::SVector{N,Float64},\n    high::SVector{N,Float64};\n    goal_sample_rate::Float64 = 0.2,\n    step_size::Union{Float64,Nothing} = nothing,\n    max_iter::Int64 = 500,\n    is_approved::Union{Function, Nothing} = nothing,\n) where {N}\n\nConstructor of RRT struct. The step_size is initiated as 1/20th of the distance between the start node and the start node by default.\n\nArguments\n\nstart::Node{N}: start position in the search space\ngoal::Node{N}: goal position in the search space\nlow::SVector{N,Float64}: lower bounds of the search space\nhigh::SVector{N,Float64}: upper bounds of the search space\ngoal_sample_rate::Float64: rate of sampling the goal node\nstep_size::Float64: maximum distance between each node\nmax_iter::Int64: maximum the number of the iterations\nis_approved::Union{Function, Nothing}: a function that returns if the node can be added the graph\n\n\n\n\n\n","category":"method"}]
}
